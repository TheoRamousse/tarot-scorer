// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TarotDB;

namespace TarotDB.Migrations
{
    [DbContext(typeof(TarotContext))]
    partial class TarotContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.22");

            modelBuilder.Entity("TarotDB.GameEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Chelem")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Excuse")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Petit")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Poignée")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Rules")
                        .HasColumnType("TEXT");

                    b.Property<int>("TakerPoints")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("TwentyOne")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("TarotDB.PlayerBiddingEntity", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Bidding")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlayerId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("PlayerBiddingEntity");
                });

            modelBuilder.Entity("TarotDB.PlayerEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("NickName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            Id = -1L,
                            FirstName = "Jane",
                            ImageName = "",
                            LastName = "Doe",
                            NickName = ""
                        });
                });

            modelBuilder.Entity("TarotDB.PlayerSessionEntity", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SessionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlayerId", "SessionId");

                    b.HasIndex("SessionId");

                    b.ToTable("PlayerSessionEntity");
                });

            modelBuilder.Entity("TarotDB.SessionEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndingTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartingTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("TarotDB.PlayerBiddingEntity", b =>
                {
                    b.HasOne("TarotDB.GameEntity", "Game")
                        .WithMany("Biddings")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TarotDB.PlayerEntity", "Player")
                        .WithMany("Games")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TarotDB.PlayerSessionEntity", b =>
                {
                    b.HasOne("TarotDB.PlayerEntity", "Player")
                        .WithMany("Sessions")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TarotDB.SessionEntity", "Session")
                        .WithMany("Players")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
